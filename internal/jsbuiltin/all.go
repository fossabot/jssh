package jsbuiltin

var modules []JsModule

func init() {
	// builtin_0.js
	modules = append(modules, JsModule{File: "builtin_0.js", Code: "\"const global = globalThis || this;\\n\\n{\\n  const removeShebangLine = (data) => {\\n    if (!data.startsWith(\\\"#!\\\")) return data;\\n    return data.replace(/^#![^\\\\n]*/, \\\"\\\");\\n  };\\n\\n  const resolveWithExtension = (name) => {\\n    const extension = [\\\".json\\\", \\\".js\\\"];\\n    if (fs.exist(name)) {\\n      if (fs.stat(name).isdir) {\\n        // 如果是目录，尝试 ${name}/package.json\\n        const pkgFile = path.join(name, \\\"package.json\\\");\\n        if (fs.exist(pkgFile)) {\\n          const pkg = loadJsonModule(pkgFile);\\n          if (pkg.main) {\\n            return resolveWithExtension(path.join(name, pkg.main));\\n          }\\n        }\\n        // 再尝试 ${name}/index.js, ${name}/index.json\\n        const indexFile = path.join(name, \\\"index\\\");\\n        if (fs.exist(indexFile)) {\\n          return indexFile;\\n        }\\n        for (const ext of extension) {\\n          if (fs.exist(indexFile + ext)) {\\n            return indexFile + ext;\\n          }\\n        }\\n      } else {\\n        // 文件则直接返回\\n        return name;\\n      }\\n    } else {\\n      // 如果文件不存在，尝试 ${name}.js, ${name}.json\\n      for (const ext of extension) {\\n        if (fs.exist(name + ext)) {\\n          return name + ext;\\n        }\\n      }\\n      // 再尝试 ${name}/index.js, ${name}/index.json\\n      const indexFile = path.join(name, \\\"index\\\");\\n      if (fs.exist(indexFile)) {\\n        return indexFile;\\n      }\\n      for (const ext of extension) {\\n        if (fs.exist(indexFile + ext)) {\\n          return indexFile + ext;\\n        }\\n      }\\n    }\\n  };\\n\\n  const resolveModulePath = (name, dir) => {\\n    if (name === \\\".\\\" || name.startsWith(\\\"/\\\") || name.startsWith(\\\"./\\\")) {\\n      return resolveWithExtension(path.join(dir, name));\\n    }\\n    const paths = [];\\n    let d = dir;\\n    while (true) {\\n      let p = path.abs(path.join(d, \\\"node_modules\\\"));\\n      paths.push(p);\\n      const d2 = path.dir(d);\\n      if (d2 === d) {\\n        break;\\n      } else {\\n        d = d2;\\n      }\\n    }\\n    for (const p of paths) {\\n      const ret = resolveWithExtension(path.join(p, name));\\n      if (ret) return ret;\\n    }\\n  };\\n\\n  const requiremodule = (name, dir = __dirname) => {\\n    if (typeof name !== \\\"string\\\") {\\n      throw new TypeError(`module name expected string type`);\\n    }\\n    if (!name) {\\n      throw new TypeError(`empty module name`);\\n    }\\n    if (!dir) {\\n      throw new TypeError(`empty module dir`);\\n    }\\n\\n    let file = resolveModulePath(name, dir);\\n    if (!file) {\\n      throw new Error(`cannot resolve module \\\"${name}\\\" on path \\\"${dir}\\\"`);\\n    }\\n    file = path.abs(file);\\n\\n    try {\\n      if (file.endsWith(\\\".json\\\")) {\\n        return loadJsonModule(file);\\n      } else {\\n        const content = fs.readfile(file);\\n        return loadJsModule(file, path.dir(file), removeShebangLine(content));\\n      }\\n    } catch (err) {\\n      const err2 = new Error(`cannot load module \\\"${name}\\\": ${err.message}`);\\n      err2.moduleName = name;\\n      err2.resolvedFilename = file;\\n      err2.originError = err;\\n      throw err2;\\n    }\\n  };\\n\\n  const loadJsonModule = (filename) => {\\n    if (require.cache[filename]) {\\n      return require.cache[filename];\\n    }\\n    return (require.cache[filename] = JSON.parse(fs.readfile(filename)));\\n  };\\n\\n  const loadJsModule = (filename, dirname, content) => {\\n    if (require.cache[filename]) {\\n      return require.cache[filename];\\n    }\\n\\n    const wrapped = `\\n(function (require, module, __dirname, __filename) { var exports = module.exports; ${content}\\nreturn module;\\n})(function require(name) {\\n  return requiremodule(name, \\\"${dirname}\\\");\\n}, {exports:{},parent:this}, \\\"${dirname}\\\", \\\"${filename}\\\")\\n`.trimLeft();\\n    return (require.cache[__filename] = evalfile(__filename, wrapped).exports);\\n  };\\n\\n  const require = (name) => {\\n    return requiremodule(name, __dirname);\\n  };\\n\\n  require.cache = {};\\n\\n  global.require = require;\\n  global.requiremodule = requiremodule;\\n}\\n\""})

	// builtin_assert.js
	modules = append(modules, JsModule{File: "builtin_assert.js", Code: "\"function assert(ok, message) {\\n  if (!ok) {\\n    throw new AssertionError({ actual: ok, expected: true, message });\\n  }\\n}\\n\\nclass AssertionError extends Error {\\n  constructor(options) {\\n    super();\\n    this.name = \\\"AssertionError\\\";\\n    this.actual = options.actual;\\n    this.expected = options.expected;\\n    this.message =\\n      options.message || `expected ${this.actual} == ${this.expected}`;\\n  }\\n\\n  toString() {\\n    return `${this.name}: ${this.message}`;\\n  }\\n}\\n\""})

	// builtin_cli.js
	modules = append(modules, JsModule{File: "builtin_cli.js", Code: "\"const cli = {};\\n\\n{\\n  const _args = (cli._args = []);\\n  const _opts = (cli._opts = {});\\n\\n  const getFlagName = (s) => {\\n    if (s.startsWith(\\\"--\\\")) {\\n      return s.slice(2);\\n    }\\n    if (s.startsWith(\\\"-\\\")) {\\n      return s.slice(1);\\n    }\\n  };\\n\\n  for (let i = 2; i < __args.length; i++) {\\n    const v = __args[i];\\n    const v2 = __args[i + 1];\\n    if (v.startsWith(\\\"-\\\")) {\\n      const r = v.match(/^--?([\\\\w\\\\-_]+)=(.*)$/);\\n      if (r) {\\n        _opts[r[1]] = r[2];\\n      } else {\\n        if (v2 !== undefined) {\\n          if (v2.startsWith(\\\"-\\\")) {\\n            _opts[getFlagName(v)] = true;\\n          } else {\\n            _opts[getFlagName(v)] = v2;\\n            i++;\\n          }\\n        } else {\\n          _opts[getFlagName(v)] = true;\\n        }\\n      }\\n    } else {\\n      _args.push(v);\\n    }\\n  }\\n\\n  cli.get = function get(n) {\\n    if (typeof n === \\\"number\\\") {\\n      return _args[n];\\n    } else {\\n      return _opts[n];\\n    }\\n  };\\n\\n  cli.bool = function bool(n) {\\n    if (_opts[n] === false || _opts[n] === undefined) return false;\\n    if (_opts[n] === true) return true;\\n    const s = _opts[n].toLowerCase();\\n    return !(s === \\\"0\\\" || s === \\\"f\\\" || s === \\\"false\\\");\\n  };\\n\\n  cli.args = function args() {\\n    return [..._args];\\n  };\\n\\n  cli.opts = function opts() {\\n    return { ..._opts };\\n  };\\n\\n  cli.prompt = function prompt(message) {\\n    if (message) print(message);\\n    return readline();\\n  };\\n\\n  cli._subcommand = {};\\n\\n  cli.subcommand = function subcommand(name, callback) {\\n    if (typeof callback !== `function`) {\\n      throw new TypeError(`callback expected a function`);\\n    }\\n    if (cli._subcommand[name]) {\\n      throw new Error(`subcommand ${name} is already registered`);\\n    }\\n    cli._subcommand[name] = callback;\\n  };\\n\\n  cli.subcommandstart = function subcommandstart() {\\n    const name = cli.get(0);\\n    if (cli._subcommand[name]) {\\n      return cli._subcommand[name]();\\n    }\\n    if (cli._subcommand[`*`]) {\\n      return cli._subcommand[`*`]();\\n    }\\n    throw new Error(`unrecognized subcommand ${name}`);\\n  };\\n}\\n\""})

	// builtin_console.js
	modules = append(modules, JsModule{File: "builtin_console.js", Code: "\"const console = {};\\n\\n{\\n  const printVars = (...vars) => {\\n    println(vars.map((v) => String(v)).join(\\\" \\\"));\\n  };\\n\\n  console.log = function log(...args) {\\n    printVars(...args);\\n  };\\n\\n  console.error = function error(...args) {\\n    printVars(...args);\\n  };\\n}\\n\""})

	// builtin_exec.js
	modules = append(modules, JsModule{File: "builtin_exec.js", Code: "\"function exec1(cmd, env = {}) {\\n  return exec(cmd, env, 1);\\n}\\n\\nfunction exec2(cmd, env = {}) {\\n  return exec(cmd, env, 2);\\n}\\n\\nssh.exec1 = function exec1(cmd, env = {}) {\\n  return ssh.exec(cmd, env, 1);\\n};\\n\\nssh.exec2 = function exec2(cmd, env = {}) {\\n  return ssh.exec(cmd, env, 2);\\n};\\n\""})

	// builtin_global.js
	modules = append(modules, JsModule{File: "builtin_global.js", Code: "\"function randomstring(size, chars) {\\n  size = size || 6;\\n  chars =\\n    chars || \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\\\";\\n  const max = chars.length;\\n  let ret = \\\"\\\";\\n  for (let i = 0; i < size; i++) {\\n    ret += chars.charAt(Math.floor(Math.random() * max));\\n  }\\n  return ret;\\n}\\n\\nfunction formatdate(format, timestamp) {\\n  //  discuss at: http://phpjs.org/functions/date/\\n  //   example 1: date('H:m:s \\\\\\\\m \\\\\\\\i\\\\\\\\s \\\\\\\\m\\\\\\\\o\\\\\\\\n\\\\\\\\t\\\\\\\\h', 1062402400);\\n  //   returns 1: '09:09:40 m is month'\\n  //   example 2: date('F j, Y, g:i a', 1062462400);\\n  //   returns 2: 'September 2, 2003, 2:26 am'\\n  //   example 3: date('Y W o', 1062462400);\\n  //   returns 3: '2003 36 2003'\\n  //   example 4: x = date('Y m d', (new Date()).getTime()/1000);\\n  //   example 4: (x+'').length == 10 // 2009 01 09\\n  //   returns 4: true\\n  //   example 5: date('W', 1104534000);\\n  //   returns 5: '53'\\n  //   example 6: date('B t', 1104534000);\\n  //   returns 6: '999 31'\\n  //   example 7: date('W U', 1293750000.82); // 2010-12-31\\n  //   returns 7: '52 1293750000'\\n  //   example 8: date('W', 1293836400); // 2011-01-01\\n  //   returns 8: '52'\\n  //   example 9: date('W Y-m-d', 1293974054); // 2011-01-02\\n  //   returns 9: '52 2011-01-02'\\n\\n  let jsdate, f;\\n  // Keep this here (works, but for code commented-out below for file size reasons)\\n  // var tal= [];\\n  const txt_words = [\\n    \\\"Sun\\\",\\n    \\\"Mon\\\",\\n    \\\"Tues\\\",\\n    \\\"Wednes\\\",\\n    \\\"Thurs\\\",\\n    \\\"Fri\\\",\\n    \\\"Satur\\\",\\n    \\\"January\\\",\\n    \\\"February\\\",\\n    \\\"March\\\",\\n    \\\"April\\\",\\n    \\\"May\\\",\\n    \\\"June\\\",\\n    \\\"July\\\",\\n    \\\"August\\\",\\n    \\\"September\\\",\\n    \\\"October\\\",\\n    \\\"November\\\",\\n    \\\"December\\\",\\n  ];\\n  // trailing backslash -> (dropped)\\n  // a backslash followed by any character (including backslash) -> the character\\n  // empty string -> empty string\\n  const formatChr = /\\\\\\\\?(.?)/gi;\\n  const formatChrCb = function (t, s) {\\n    return f[t] ? f[t]() : s;\\n  };\\n  const _pad = function (n, c) {\\n    n = String(n);\\n    while (n.length < c) {\\n      n = \\\"0\\\" + n;\\n    }\\n    return n;\\n  };\\n  f = {\\n    // Day\\n    d() {\\n      // Day of month w/leading 0; 01..31\\n      return _pad(f.j(), 2);\\n    },\\n    D() {\\n      // Shorthand day name; Mon...Sun\\n      return f.l().slice(0, 3);\\n    },\\n    j() {\\n      // Day of month; 1..31\\n      return jsdate.getDate();\\n    },\\n    l() {\\n      // Full day name; Monday...Sunday\\n      return txt_words[f.w()] + \\\"day\\\";\\n    },\\n    N() {\\n      // ISO-8601 day of week; 1[Mon]..7[Sun]\\n      return f.w() || 7;\\n    },\\n    S() {\\n      // Ordinal suffix for day of month; st, nd, rd, th\\n      const j = f.j();\\n      let i = j % 10;\\n      if (i <= 3 && parseInt((j % 100) / 10, 10) === 1) {\\n        i = 0;\\n      }\\n      return [\\\"st\\\", \\\"nd\\\", \\\"rd\\\"][i - 1] || \\\"th\\\";\\n    },\\n    w() {\\n      // Day of week; 0[Sun]..6[Sat]\\n      return jsdate.getDay();\\n    },\\n    z() {\\n      // Day of year; 0..365\\n      const a = new Date(f.Y(), f.n() - 1, f.j());\\n      const b = new Date(f.Y(), 0, 1);\\n      return Math.round((a - b) / 864e5);\\n    },\\n\\n    // Week\\n    W() {\\n      // ISO-8601 week number\\n      const a = new Date(f.Y(), f.n() - 1, f.j() - f.N() + 3);\\n      const b = new Date(a.getFullYear(), 0, 4);\\n      return _pad(1 + Math.round((a - b) / 864e5 / 7), 2);\\n    },\\n\\n    // Month\\n    F() {\\n      // Full month name; January...December\\n      return txt_words[6 + f.n()];\\n    },\\n    m() {\\n      // Month w/leading 0; 01...12\\n      return _pad(f.n(), 2);\\n    },\\n    M() {\\n      // Shorthand month name; Jan...Dec\\n      return f.F().slice(0, 3);\\n    },\\n    n() {\\n      // Month; 1...12\\n      return jsdate.getMonth() + 1;\\n    },\\n    t() {\\n      // Days in month; 28...31\\n      return new Date(f.Y(), f.n(), 0).getDate();\\n    },\\n\\n    // Year\\n    L() {\\n      // Is leap year?; 0 or 1\\n      const j = f.Y();\\n      return ((j % 4 === 0) & (j % 100 !== 0)) | (j % 400 === 0);\\n    },\\n    o() {\\n      // ISO-8601 year\\n      const n = f.n();\\n      const W = f.W();\\n      const Y = f.Y();\\n      // eslint-disable-next-line\\n      return Y + (n === 12 && W < 9 ? 1 : n === 1 && W > 9 ? -1 : 0);\\n    },\\n    Y() {\\n      // Full year; e.g. 1980...2010\\n      return jsdate.getFullYear();\\n    },\\n    y() {\\n      // Last two digits of year; 00...99\\n      return f.Y().toString().slice(-2);\\n    },\\n\\n    // Time\\n    a() {\\n      // am or pm\\n      return jsdate.getHours() > 11 ? \\\"pm\\\" : \\\"am\\\";\\n    },\\n    A() {\\n      // AM or PM\\n      return f.a().toUpperCase();\\n    },\\n    B() {\\n      // Swatch Internet time; 000..999\\n      const H = jsdate.getUTCHours() * 36e2;\\n      // Hours\\n      const i = jsdate.getUTCMinutes() * 60;\\n      // Minutes\\n      const s = jsdate.getUTCSeconds(); // Seconds\\n      return _pad(Math.floor((H + i + s + 36e2) / 86.4) % 1e3, 3);\\n    },\\n    g() {\\n      // 12-Hours; 1..12\\n      return f.G() % 12 || 12;\\n    },\\n    G() {\\n      // 24-Hours; 0..23\\n      return jsdate.getHours();\\n    },\\n    h() {\\n      // 12-Hours w/leading 0; 01..12\\n      return _pad(f.g(), 2);\\n    },\\n    H() {\\n      // 24-Hours w/leading 0; 00..23\\n      return _pad(f.G(), 2);\\n    },\\n    i() {\\n      // Minutes w/leading 0; 00..59\\n      return _pad(jsdate.getMinutes(), 2);\\n    },\\n    s() {\\n      // Seconds w/leading 0; 00..59\\n      return _pad(jsdate.getSeconds(), 2);\\n    },\\n    u() {\\n      // Microseconds; 000000-999000\\n      return _pad(jsdate.getMilliseconds() * 1000, 6);\\n    },\\n\\n    // Timezone\\n    e() {\\n      // Timezone identifier; e.g. Atlantic/Azores, ...\\n      // The following works, but requires inclusion of the very large\\n      // timezone_abbreviations_list() function.\\n      /*              return that.date_default_timezone_get();\\n       */\\n      throw new Error(\\n        \\\"Not supported (see source code of date() for timezone on how to add support)\\\"\\n      );\\n    },\\n    I() {\\n      // DST observed?; 0 or 1\\n      // Compares Jan 1 minus Jan 1 UTC to Jul 1 minus Jul 1 UTC.\\n      // If they are not equal, then DST is observed.\\n      const a = new Date(f.Y(), 0);\\n      // Jan 1\\n      const c = Date.UTC(f.Y(), 0);\\n      // Jan 1 UTC\\n      const b = new Date(f.Y(), 6);\\n      // Jul 1\\n      const d = Date.UTC(f.Y(), 6); // Jul 1 UTC\\n      return a - c !== b - d ? 1 : 0;\\n    },\\n    O() {\\n      // Difference to GMT in hour format; e.g. +0200\\n      const tzo = jsdate.getTimezoneOffset();\\n      const a = Math.abs(tzo);\\n      return (\\n        (tzo > 0 ? \\\"-\\\" : \\\"+\\\") + _pad(Math.floor(a / 60) * 100 + (a % 60), 4)\\n      );\\n    },\\n    P() {\\n      // Difference to GMT w/colon; e.g. +02:00\\n      const O = f.O();\\n      return O.substr(0, 3) + \\\":\\\" + O.substr(3, 2);\\n    },\\n    T() {\\n      // Timezone abbreviation; e.g. EST, MDT, ...\\n      // The following works, but requires inclusion of the very\\n      // large timezone_abbreviations_list() function.\\n      /*              var abbr, i, os, _default;\\n      if (!tal.length) {\\n        tal = that.timezone_abbreviations_list();\\n      }\\n      if (that.php_js && that.php_js.default_timezone) {\\n        _default = that.php_js.default_timezone;\\n        for (abbr in tal) {\\n          for (i = 0; i < tal[abbr].length; i++) {\\n            if (tal[abbr][i].timezone_id === _default) {\\n              return abbr.toUpperCase();\\n            }\\n          }\\n        }\\n      }\\n      for (abbr in tal) {\\n        for (i = 0; i < tal[abbr].length; i++) {\\n          os = -jsdate.getTimezoneOffset() * 60;\\n          if (tal[abbr][i].offset === os) {\\n            return abbr.toUpperCase();\\n          }\\n        }\\n      }\\n      */\\n      return \\\"UTC\\\";\\n    },\\n    Z() {\\n      // Timezone offset in seconds (-43200...50400)\\n      return -jsdate.getTimezoneOffset() * 60;\\n    },\\n\\n    // Full Date/Time\\n    c() {\\n      // ISO-8601 date.\\n      return \\\"Y-m-d\\\\\\\\TH:i:sP\\\".replace(formatChr, formatChrCb);\\n    },\\n    r() {\\n      // RFC 2822\\n      return \\\"D, d M Y H:i:s O\\\".replace(formatChr, formatChrCb);\\n    },\\n    U() {\\n      // Seconds since UNIX epoch\\n      return (jsdate / 1000) | 0;\\n    },\\n  };\\n  this.date = function (format, timestamp) {\\n    // eslint-disable-next-line\\n    jsdate =\\n      timestamp === undefined\\n        ? new Date() // Not provided\\n        : timestamp instanceof Date\\n        ? new Date(timestamp) // JS Date()\\n        : new Date(timestamp * 1000); // UNIX timestamp (auto-convert to int)\\n    return format.replace(formatChr, formatChrCb);\\n  };\\n  return this.date(format, timestamp);\\n}\\n\\n/* brought from https://github.com/KyleAMathews/deepmerge and unwrapped from UMD */\\nfunction deepmerge(target, src) {\\n  var array = Array.isArray(src);\\n  var dst = (array && []) || {};\\n\\n  if (array) {\\n    target = target || [];\\n    dst = dst.concat(target);\\n    src.forEach(function (e, i) {\\n      if (typeof dst[i] === \\\"undefined\\\") {\\n        dst[i] = e;\\n      } else if (typeof e === \\\"object\\\") {\\n        dst[i] = deepmerge(target[i], e);\\n      } else {\\n        if (target.indexOf(e) === -1) {\\n          dst.push(e);\\n        }\\n      }\\n    });\\n  } else {\\n    if (target && typeof target === \\\"object\\\") {\\n      Object.keys(target).forEach(function (key) {\\n        dst[key] = target[key];\\n      });\\n    }\\n    Object.keys(src).forEach(function (key) {\\n      if (typeof src[key] !== \\\"object\\\" || !src[key]) {\\n        dst[key] = src[key];\\n      } else {\\n        if (!target[key]) {\\n          dst[key] = src[key];\\n        } else {\\n          dst[key] = deepmerge(target[key], src[key]);\\n        }\\n      }\\n    });\\n  }\\n\\n  return dst;\\n}\\n\""})

	// builtin_log.js
	modules = append(modules, JsModule{File: "builtin_log.js", Code: "\"function println(...args) {\\n  print(...args);\\n  print(\\\"\\\\n\\\");\\n}\\n\\nconst log = {};\\n{\\n  const levels = { ERROR: 1, WARN: 2, INFO: 3, DEBUG: 4 };\\n  const logLevel = levels[(__env[\\\"JSSH_LOG\\\"] || \\\"INFO\\\").toUpperCase()];\\n\\n  const reset = `\\\\u001b[0m`;\\n\\n  const red = (line) => {\\n    return `\\\\u001b[31;1m${line}${reset}`;\\n  };\\n\\n  const green = (line) => {\\n    return `\\\\u001b[32;1m${line}${reset}`;\\n  };\\n\\n  const yellow = (line) => {\\n    return `\\\\u001b[33;1m${line}${reset}`;\\n  };\\n\\n  const gray = (line) => {\\n    return `\\\\u001b[2;1m${line}${reset}`;\\n  };\\n\\n  log.debug = function debug(message, ...args) {\\n    if (logLevel >= levels.DEBUG) {\\n      stdoutlog(gray(format(message, ...args)));\\n    }\\n  };\\n\\n  log.info = function info(message, ...args) {\\n    if (logLevel >= levels.INFO) {\\n      stdoutlog(green(format(message, ...args)));\\n    }\\n  };\\n\\n  log.warn = function error(message, ...args) {\\n    if (logLevel >= levels.WARN) {\\n      stderrlog(yellow(format(message, ...args)));\\n    }\\n  };\\n\\n  log.error = function error(message, ...args) {\\n    if (logLevel >= levels.ERROR) {\\n      stderrlog(red(format(message, ...args)));\\n    }\\n  };\\n\\n  log.fatal = function fatal(message, ...args) {\\n    log.error(message, ...args);\\n    exit(1);\\n  };\\n}\\n\""})
}
